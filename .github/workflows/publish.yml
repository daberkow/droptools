name: Publish package to the Maven Central Repository and GitHub Packages
on:
  release:
    types: [published]
jobs:
  gradle:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    # runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: adopt
        java-version: 17
    - name: Start PostgreSQL on Ubuntu
      run: |
        sudo systemctl start postgresql.service
        pg_isready

    - name: Create db context
      run: |
        sudo -u postgres psql --command="create database example_app;"
        sudo -u postgres psql --command="create user example_user with password 's3cr3t';"
        cp /home/runner/work/droptools/droptools/droptools-example/src/main/resources/db/migration/20141010__init.sql /tmp/
        chmod 777 /tmp/20141010__init.sql
        sudo -u postgres psql -d example_app -U postgres -f /tmp/20141010__init.sql
        sudo -u postgres psql --command="grant all on database example_app to example_user;"
        sudo -u postgres psql --command="CREATE USER testuser PASSWORD 'password';"
        sudo -u postgres psql --command="grant all on all tables in schema ex to example_user" -d example_app

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
    - name: Setup and execute Gradle 'test' task
      uses: gradle/gradle-build-action@v2
      with:
        arguments: clean generatejooq build test --scan
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
        GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}
    - name: Run webapp in the background
      run: |
        ./gradlew droptools-example:run &
        sleep 20
        curl http://127.0.0.1:8080/posts

    - name: Build Versions
      env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY_JOOQ }}
          GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE_JOOQ }}
      run: |
        ./build.sh publish

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: always() # always run even if the previous step fails
      with:
        name: build-artifacts
        path: /tmp/artifactz/*
    - name: Upload build reports
      uses: actions/upload-artifact@v3
      if: always() # always run even if the previous step fails
      with:
        name: build-reports
        path: build/reports/
    - name: Upload Test XML Files
      uses: actions/upload-artifact@v3
      if: always() # always run even if the previous step fails
      with:
        name: test-xmls
        path: /tmp/*.xml
